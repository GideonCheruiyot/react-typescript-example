{"version":3,"sources":["components/XxxHeader/XxxHeader.module.scss","assets/styles/XxxSharedStyles.module.scss","pages/XxxQuestionsPage/XxxQuestionsPage.module.scss","App.module.scss","pages/XxxAnswersPage/XxxAnswersPage.module.scss","assets/images/logo.svg","components/XxxSearchBox/XxxSearchBox.module.scss","pages/XxxAnswersPage/XxxAnswersPage.tsx","components/XxxSearchBox/XxxSearchBox.tsx","components/XxxHeader/XxxHeader.tsx","pages/XxxHomePage/XxxHomePage.tsx","pages/XxxPageNotFoundPage/XxxPageNotFoundPage.tsx","pages/XxxQuestionsPage/XxxQuestionsPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","XxxAnswersPage","props","questionId","requestUrl","requestParams","unlisten","state","answers","isEmpty","isError","isLoading","question","this","getQuestionId","getQuestion","history","listen","console","log","params","match","hasOwnProperty","id","setState","key","site","filter","order","sort","url","getQueryString","thisRef","fetch","then","response","status","json","data","Array","isArray","items","length","getAnswers","catch","Object","keys","map","encodeURIComponent","join","text","undefined","doc","DOMParser","parseFromString","newText","documentElement","textContent","replace","time","Date","toLocaleDateString","year","month","day","pageView","className","sharedStyles","pageMessageContainer","CircularProgress","pageMessageError","pageMessageWarning","styles","answersContainer","answerQuestionContainer","questionTitle","decodeHtmlEntities","title","questionCaption","questionInfo","view_count","score","tags","timeToShortDate","creation_date","questionBody","dangerouslySetInnerHTML","__html","body","item","is_accepted","answerAccepted","answerNotAccepted","answer_id","answerCaption","answerInfo","answerBody","page","pageTitle","mainCard","React","XxxSearchBox","isSearchButtonDisabled","previousSearchText","searchText","handleChange","bind","handleSubmit","event","target","value","preventDefault","push","pathname","search","searchBox","onSubmit","autoFocus","type","onChange","IconButton","aria-label","color","disabled","href","onClick","withRouter","XxxHeader","header","src","logo","alt","headerTitle","searchBoxContainer","XxxHomePage","XxxPageNotFoundPage","XxxQuestionsPage","pageBaseUrl","requestedPage","currentPage","isMorePages","questions","handleFirstPage","handleNextPage","handlePreviousPage","readUrlQueryString","location","getQuestions","values","queryString","parse","baseUrl","has_more","navigateToPage","parseInt","toString","queryParams","question_id","process","dummy","pageFooter","pageNavigationPanel","App","basename","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37132406.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"XxxHeader_header__1_1KF\",\"headerTitle\":\"XxxHeader_headerTitle__1_81R\",\"logo\":\"XxxHeader_logo__3G4XE\",\"searchBoxContainer\":\"XxxHeader_searchBoxContainer__2v2F3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainCard\":\"XxxSharedStyles_mainCard__3SIRA\",\"page\":\"XxxSharedStyles_page__27M9s\",\"pageMessageError\":\"XxxSharedStyles_pageMessageError__cIUGn\",\"pageMessageContainer\":\"XxxSharedStyles_pageMessageContainer__2aGmj\",\"pageMessageWarning\":\"XxxSharedStyles_pageMessageWarning__22cCe\",\"pageTitle\":\"XxxSharedStyles_pageTitle__30m_8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageFooter\":\"XxxQuestionsPage_pageFooter__22Qw2\",\"pageNavigationPanel\":\"XxxQuestionsPage_pageNavigationPanel__1riIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"App-logo\":\"App_App-logo__1GLNd\",\"App-logo-spin\":\"App_App-logo-spin__1EbLw\",\"App-header\":\"App_App-header__3nnPn\",\"App-link\":\"App_App-link__TRj1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerAccepted\":\"XxxAnswersPage_answerAccepted__2AF2s\",\"answerCaption\":\"XxxAnswersPage_answerCaption__2Cwpr\",\"answerInfo\":\"XxxAnswersPage_answerInfo__1IlQk\",\"answerNotAccepted\":\"XxxAnswersPage_answerNotAccepted__1EpgF\",\"answerQuestionContainer\":\"XxxAnswersPage_answerQuestionContainer__3qsqw\",\"answersContainer\":\"XxxAnswersPage_answersContainer__2xGEk\",\"backToQuestions\":\"XxxAnswersPage_backToQuestions__1uUFb\",\"questionCaption\":\"XxxAnswersPage_questionCaption__2P1yB\",\"questionInfo\":\"XxxAnswersPage_questionInfo__1Ut32\",\"questionTitle\":\"XxxAnswersPage_questionTitle__1FEzL\"};","module.exports = __webpack_public_path__ + \"static/media/logo.299e6db5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"XxxSearchBox_searchBox__3MpVo\"};","import * as React from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport styles from \"./XxxAnswersPage.module.scss\";\nimport sharedStyles from \"../../assets/styles/XxxSharedStyles.module.scss\";\n\nexport interface XxxAnswersPagePropsInterface extends RouteComponentProps {}\n\nexport interface XxxAnswersPageStateInterface {\n  answers: any[];\n  isEmpty: boolean;\n  isError: boolean;\n  isLoading: boolean;\n  question: any;\n}\n\n// TODO search params type for id\nexport interface XxxAnswersPageSearchParams {\n  id?: string | undefined;\n}\n\nclass XxxAnswersPage extends React.Component<\n  XxxAnswersPagePropsInterface,\n  XxxAnswersPageStateInterface\n> {\n  // BEST PRACTICE: declare all private properties at the top\n  questionId: string = \"\";\n  requestUrl: string = \"\";\n  requestParams: any = {};\n  unlisten: any;\n\n  constructor(props: XxxAnswersPagePropsInterface) {\n    super(props);\n    this.state = {\n      answers: [],\n      isEmpty: false,\n      isError: false,\n      isLoading: true,\n      question: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestionId();\n    this.getQuestion();\n  }\n\n  componentWillMount() {\n    this.unlisten = this.props.history.listen(() => {\n      console.log(\"url changed\");\n      this.getQuestionId();\n      this.getQuestion();\n    });\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n\n  getQuestionId() {\n    let id: string = \"\";\n    let params: XxxAnswersPageSearchParams;\n    params = this.props.match.params;\n    if (params.hasOwnProperty(\"id\") && typeof params.id === \"string\") {\n      this.questionId = params.id;\n    }\n    return id;\n  }\n\n  getQuestion() {\n    this.setState({\n      isEmpty: false,\n      isError: false,\n      isLoading: true\n    });\n    this.setState({ isError: false, isLoading: true });\n    this.requestUrl =\n      \"https://api.stackexchange.com/2.2/questions/\" + this.questionId;\n    this.requestParams = {\n      key: \"U4DMV*8nvpm3EOpvf69Rxw((\",\n      site: \"stackoverflow\",\n      filter: \"withbody\",\n      order: \"desc\",\n      sort: \"votes\"\n    };\n    const url = this.requestUrl + \"?\" + this.getQueryString(this.requestParams);\n    const thisRef = this;\n    fetch(url)\n      .then(function(response) {\n        if (response.status !== 200) {\n          thisRef.setState({\n            isError: true,\n            isLoading: false\n          });\n          return;\n        }\n        response.json().then(data => {\n          if (\n            typeof data === \"object\" &&\n            data.hasOwnProperty(\"items\") &&\n            Array.isArray(data.items) &&\n            data.items.length > 0\n          ) {\n            thisRef.setState({\n              question: data.items[0]\n            });\n            thisRef.getAnswers();\n          } else {\n            thisRef.setState({\n              isEmpty: true,\n              isLoading: false\n            });\n          }\n        });\n      })\n      .catch(function() {\n        thisRef.setState({\n          isError: true,\n          isLoading: false\n        });\n      });\n  }\n\n  getAnswers() {\n    this.requestUrl += \"/answers\";\n    const url = this.requestUrl + \"?\" + this.getQueryString(this.requestParams);\n    const thisRef = this;\n    fetch(url)\n      .then(function(response) {\n        if (response.status !== 200) {\n          thisRef.setState({\n            isError: true,\n            isLoading: false\n          });\n          return;\n        }\n        response.json().then(data => {\n          if (\n            typeof data === \"object\" &&\n            data.hasOwnProperty(\"items\") &&\n            Array.isArray(data.items) &&\n            data.items.length > 0\n          ) {\n            thisRef.setState({\n              answers: data.items,\n              isLoading: false\n            });\n          } else {\n            thisRef.setState({\n              isEmpty: true,\n              isLoading: false\n            });\n          }\n        });\n      })\n      .catch(function() {\n        thisRef.setState({\n          isError: true,\n          isLoading: false\n        });\n      });\n  }\n\n  getQueryString(params: any) {\n    return Object.keys(params)\n      .map(\n        key => encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key])\n      )\n      .join(\"&\");\n  }\n\n  decodeHtmlEntities(text: string) {\n    if (text === undefined || text === \"\") {\n      return \"\";\n    }\n    const doc = new DOMParser().parseFromString(text, \"text/html\");\n    let newText: string = \"\";\n    if (typeof doc.documentElement.textContent === \"string\") {\n      newText = doc.documentElement.textContent;\n    }\n    newText = newText.replace(\"&quot;\", '\"');\n    return newText;\n  }\n\n  timeToShortDate(time: string) {\n    const date = new Date(time);\n    const options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\"\n    };\n    return date.toLocaleDateString(\"en\", options);\n  }\n\n  render() {\n    let pageView = null;\n    if (this.state.isLoading) {\n      pageView = (\n        <div className={sharedStyles.pageMessageContainer}>\n          <CircularProgress />\n        </div>\n      );\n    }\n    if (this.state.isError) {\n      pageView = (\n        <div className={sharedStyles.pageMessageContainer}>\n          <div className={sharedStyles.pageMessageError}>\n            Error Occurred Getting Questions\n          </div>\n        </div>\n      );\n    }\n    if (this.state.isEmpty) {\n      pageView = (\n        <div className={sharedStyles.pageMessageContainer}>\n          <div className={sharedStyles.pageMessageWarning}>\n            No Questions Found\n          </div>\n        </div>\n      );\n    }\n    if (!(this.state.isEmpty || this.state.isError || this.state.isLoading)) {\n      pageView = (\n        <div className={styles.answersContainer}>\n          <div className={styles.answerQuestionContainer}>\n            <div className={styles.questionTitle}>\n              {this.decodeHtmlEntities(this.state.question.title)}\n            </div>\n            <div>\n              <span className={styles.questionCaption}>Number of Views: </span>\n              <span className={styles.questionInfo}>\n                {this.state.question.view_count}\n              </span>\n            </div>\n            <div>\n              <span className={styles.questionCaption}>Score: </span>\n              <span className={styles.questionInfo}>\n                {this.state.question.score}\n              </span>\n            </div>\n            <div>\n              <span className={styles.questionCaption}>Tags: </span>\n              <span className={styles.questionInfo}>\n                {this.state.question.tags.join()}\n              </span>\n            </div>\n            <div>\n              <span className={styles.questionCaption}>Asked: </span>\n              <span className={styles.questionInfo}>\n                {this.timeToShortDate(this.state.question.creation_date)}\n              </span>\n            </div>\n            <div\n              className={styles.questionBody}\n              dangerouslySetInnerHTML={\n                { __html: this.state.question.body } || \"\"\n              }\n            ></div>\n          </div>\n          {this.state.answers.map(item => (\n            <div\n              className={\n                item.is_accepted\n                  ? styles.answerAccepted\n                  : styles.answerNotAccepted\n              }\n              key={item.answer_id}\n            >\n              <div>\n                <span className={styles.answerCaption}>Score: </span>\n                <span className={styles.answerInfo}>{item.score}</span>\n              </div>\n              <div>\n                <span className={styles.answerCaption}>Answered: </span>\n                <span className={styles.answerInfo}>\n                  {this.timeToShortDate(item.creation_date)}\n                </span>\n              </div>\n              <div className={styles.answerCaption}>Answer:</div>\n              <div\n                className={styles.answerBody}\n                dangerouslySetInnerHTML={{ __html: item.body } || \"\"}\n              ></div>\n            </div>\n          ))}\n        </div>\n      );\n    }\n    return (\n      <div className={sharedStyles.page}>\n        <div className={sharedStyles.pageTitle}>Stack Exchange Answers</div>\n        <div className={sharedStyles.mainCard}>{pageView}</div>\n      </div>\n    );\n  }\n}\n\nexport default XxxAnswersPage;\n","import * as React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"react-router\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { withRouter } from \"react-router-dom\";\n\nimport styles from \"./XxxSearchBox.module.scss\";\n\nexport interface XxxSearchBoxPropsInterface extends RouteComponentProps {}\n\nexport interface XxxSearchBoxStateInterface {\n  isSearchButtonDisabled: boolean;\n  previousSearchText: string | null;\n  searchText: string;\n}\n\nclass XxxSearchBox extends React.Component<\n  XxxSearchBoxPropsInterface,\n  XxxSearchBoxStateInterface\n> {\n  constructor(props: XxxSearchBoxPropsInterface) {\n    super(props);\n    this.state = {\n      isSearchButtonDisabled: true,\n      previousSearchText: null,\n      searchText: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event: any) {\n    const searchText: string = event.target.value;\n    // since setState is asynchronous, use callback for anything that depends on knowing state after setting state\n    this.setState({ searchText: searchText }, () => {\n      // it's ok to do setState in callback of setState\n      // Best Practice: don't use this.state in setState, get state from the updater function\n      this.setState(state => {\n        return {\n          isSearchButtonDisabled:\n            state.searchText.length === 0 ||\n            state.searchText === state.previousSearchText\n        };\n      });\n    });\n  }\n\n  handleSubmit(event: any) {\n    event.preventDefault();\n    if (this.state.isSearchButtonDisabled) {\n      return;\n    }\n    this.setState({\n      isSearchButtonDisabled: true,\n      previousSearchText: this.state.searchText\n    });\n    // set search text as parameter in url and navigate to the page that will do the search\n    this.props.history.push({\n      pathname: \"/questions\",\n      search: \"?title=\" + encodeURIComponent(this.state.searchText)\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <form className={styles.searchBox} onSubmit={this.handleSubmit}>\n          <input\n            autoFocus\n            type=\"search\"\n            value={this.state.searchText}\n            onChange={this.handleChange}\n          />\n          <IconButton\n            aria-label=\"search\"\n            color=\"primary\"\n            disabled={this.state.isSearchButtonDisabled}\n            href=\"#\"\n            onClick={this.handleSubmit}\n          >\n            <SearchIcon />\n          </IconButton>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(XxxSearchBox);\n","import * as React from \"react\";\n\nimport logo from \"../../assets/images/logo.svg\";\nimport styles from \"./XxxHeader.module.scss\";\nimport XxxSearchBox from \"../XxxSearchBox/XxxSearchBox\";\n\nclass XxxHeader extends React.Component {\n  render() {\n    return (\n      <div className={styles.header}>\n        <img src={logo} className={styles.logo} alt=\"logo\" />\n        <div className={styles.headerTitle}>React TypeScript Example</div>\n        <div className={styles.searchBoxContainer}>\n          <XxxSearchBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default XxxHeader;\n","import * as React from \"react\";\nimport sharedStyles from \"../../assets/styles/XxxSharedStyles.module.scss\";\n\nclass XxxHomePage extends React.Component {\n  render() {\n    return (\n      <div className={sharedStyles.page}>\n        <div className={sharedStyles.pageTitle}>Stack Exchange Search</div>\n        <div className={sharedStyles.mainCard}>\n          <p>This will search Stack Exchange questions for given title text.</p>\n          <p>\n            Enter your search text and click the icon or press the Enter key. A\n            list of matching questions will be shown.\n          </p>\n          <p>After that, you can click on a question to see the answers.</p>\n          <p>\n            Full source available at{\" \"}\n            <a href=\"https://github.com/reactjsexample/react-typescript-example\">\n              https://github.com/reactjsexample/react-typescript-example\n            </a>\n          </p>\n          <h3>Written in React 16.9.0 with TypeScript</h3>\n          <h4>By JC Lango</h4>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default XxxHomePage;\n","import * as React from \"react\";\nimport sharedStyles from \"../../assets/styles/XxxSharedStyles.module.scss\";\n\nclass XxxPageNotFoundPage extends React.Component {\n  render() {\n    return (\n      <div className={sharedStyles.page}>\n        <div className={sharedStyles.pageTitle}>Page Not Found</div>\n        <div className={sharedStyles.mainCard}>\n          <p>\n            The requested page at this address is not found.{\" \"}\n            <a href=\"/\">Home Page</a>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default XxxPageNotFoundPage;\n","import * as React from \"react\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { CircularProgress, IconButton } from \"@material-ui/core\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport queryString from \"query-string\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport sharedStyles from \"../../assets/styles/XxxSharedStyles.module.scss\";\nimport styles from \"./XxxQuestionsPage.module.scss\";\n\nexport interface XxxQuestionsPagePropsInterface extends RouteComponentProps {}\n\nexport interface XxxQuestionsPageStateInterface {\n  currentPage: string;\n  isEmpty: boolean;\n  isError: boolean;\n  isLoading: boolean;\n  isMorePages: boolean;\n  questions: any[];\n}\n\nclass XxxQuestionsPage extends React.Component<\n  XxxQuestionsPagePropsInterface,\n  XxxQuestionsPageStateInterface\n> {\n  // BEST PRACTICE: declare all private properties at the top\n  pageBaseUrl = \"/questions\";\n  requestedPage = \"\";\n  title = \"\";\n  unlisten: any;\n\n  constructor(props: XxxQuestionsPagePropsInterface) {\n    super(props);\n    this.state = {\n      currentPage: \"\",\n      isEmpty: false,\n      isError: false,\n      isLoading: true,\n      isMorePages: false,\n      questions: []\n    };\n    // bind event handlers so we can refer to the this object\n    this.handleFirstPage = this.handleFirstPage.bind(this);\n    this.handleNextPage = this.handleNextPage.bind(this);\n    this.handlePreviousPage = this.handlePreviousPage.bind(this);\n  }\n\n  componentDidMount() {\n    this.readUrlQueryString(this.props.location.search);\n    this.getQuestions();\n  }\n\n  componentWillMount() {\n    this.unlisten = this.props.history.listen(location => {\n      this.readUrlQueryString(location.search);\n      this.getQuestions();\n    });\n  }\n\n  readUrlQueryString(search: string) {\n    const values = queryString.parse(search);\n    if (typeof values.title === \"string\") {\n      this.title = values.title;\n    }\n    if (typeof values.page === \"string\") {\n      this.requestedPage = values.page;\n    }\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n\n  getQuestions() {\n    this.setState({\n      isEmpty: false,\n      isError: false,\n      isLoading: true\n    });\n    const baseUrl = \"https://api.stackexchange.com/2.2/search/advanced\";\n    const requestParams = {\n      key: \"U4DMV*8nvpm3EOpvf69Rxw((\",\n      title: this.title || \"\",\n      answers: \"1\",\n      site: \"stackoverflow\",\n      filter: \"withbody\",\n      page: this.requestedPage || \"1\",\n      order: \"desc\",\n      sort: \"votes\"\n    };\n    const url = baseUrl + \"?\" + this.getQueryString(requestParams);\n    const thisRef = this;\n    fetch(url)\n      .then(function(response) {\n        if (response.status !== 200) {\n          thisRef.setState({\n            isError: true,\n            isLoading: false\n          });\n          return;\n        }\n        response.json().then(data => {\n          if (\n            typeof data === \"object\" &&\n            data.hasOwnProperty(\"items\") &&\n            Array.isArray(data.items) &&\n            data.items.length > 0\n          ) {\n            thisRef.setState({\n              currentPage: requestParams.page,\n              isLoading: false,\n              isMorePages: data.has_more,\n              questions: data.items\n            });\n          } else {\n            thisRef.setState({\n              isEmpty: true,\n              isLoading: false\n            });\n          }\n        });\n      })\n      .catch(function() {\n        thisRef.setState({\n          isError: true,\n          isLoading: false\n        });\n      });\n  }\n\n  getQueryString(params: any) {\n    return Object.keys(params)\n      .map(\n        key => encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key])\n      )\n      .join(\"&\");\n  }\n\n  decodeHtmlEntities(text: string) {\n    if (text === undefined || text === \"\") {\n      return \"\";\n    }\n    const doc = new DOMParser().parseFromString(text, \"text/html\");\n    let newText: string = \"\";\n    if (typeof doc.documentElement.textContent === \"string\") {\n      newText = doc.documentElement.textContent;\n    }\n    newText = newText.replace(\"&quot;\", '\"');\n    return newText;\n  }\n\n  handleFirstPage() {\n    this.requestedPage = \"1\";\n    this.navigateToPage();\n  }\n\n  handleNextPage() {\n    this.requestedPage = (parseInt(this.state.currentPage, 10) + 1).toString();\n    this.navigateToPage();\n  }\n\n  handlePreviousPage() {\n    this.requestedPage = (parseInt(this.state.currentPage, 10) - 1).toString();\n    this.navigateToPage();\n  }\n\n  navigateToPage() {\n    const queryParams = {\n      title: this.title,\n      page: this.requestedPage\n    };\n    this.props.history.push(\n      this.pageBaseUrl + \"?\" + this.getQueryString(queryParams)\n    );\n  }\n\n  render() {\n    let pageView = null;\n    if (this.state.isLoading) {\n      pageView = (\n        <div className={sharedStyles.pageMessageContainer}>\n          <CircularProgress />\n        </div>\n      );\n    }\n    if (this.state.isError) {\n      pageView = (\n        <div className={sharedStyles.pageMessageContainer}>\n          <div className={sharedStyles.pageMessageError}>\n            Error Occurred Getting Questions\n          </div>\n        </div>\n      );\n    }\n    if (this.state.isEmpty) {\n      pageView = (\n        <div className={sharedStyles.pageMessageContainer}>\n          <div className={sharedStyles.pageMessageWarning}>\n            No Questions Found\n          </div>\n        </div>\n      );\n    }\n    if (!(this.state.isEmpty || this.state.isError || this.state.isLoading)) {\n      pageView = (\n        <div>\n          <ul>\n            {this.state.questions.map(item => (\n              <li key={item.question_id}>\n                <a\n                  href={\n                    process.env.PUBLIC_URL + \"/#/answers/\" + item.question_id\n                  }\n                  className={styles.dummy}\n                  key={item.question_id}\n                >\n                  {this.decodeHtmlEntities(item.title)}\n                </a>\n              </li>\n            ))}\n          </ul>\n          <div className={styles.pageFooter}>\n            <div className={styles.pageNavigationPanel}>\n              <span>Page {this.state.currentPage}</span>\n              <IconButton\n                disabled={this.state.currentPage === \"1\"}\n                onClick={this.handleFirstPage}\n                href=\"#\"\n                title=\"Go to First Page\"\n              >\n                <FirstPageIcon />\n              </IconButton>\n              <IconButton\n                disabled={this.state.currentPage === \"1\"}\n                onClick={this.handlePreviousPage}\n                href=\"#\"\n                title=\"Go to Previous Page\"\n              >\n                <ChevronLeftIcon />\n              </IconButton>\n              <IconButton\n                disabled={!this.state.isMorePages}\n                onClick={this.handleNextPage}\n                href=\"#\"\n                title=\"Go to Next Page\"\n              >\n                <ChevronRightIcon />\n              </IconButton>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className={sharedStyles.page}>\n        <div className={sharedStyles.pageTitle}>Stack Exchange Questions</div>\n        <div className={sharedStyles.mainCard}>{pageView}</div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(XxxQuestionsPage);\n","import * as React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport styles from \"./App.module.scss\";\nimport XxxAnswersPage from \"./pages/XxxAnswersPage/XxxAnswersPage\";\nimport XxxHeader from \"./components/XxxHeader/XxxHeader\";\nimport XxxHomePage from \"./pages/XxxHomePage/XxxHomePage\";\nimport XxxPageNotFoundPage from \"./pages/XxxPageNotFoundPage/XxxPageNotFoundPage\";\nimport XxxQuestionsPage from \"./pages/XxxQuestionsPage/XxxQuestionsPage\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className={styles.App}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <XxxHeader />\n          <div>\n            <Switch>\n              <Route exact path=\"/\" component={XxxHomePage} />\n              <Route path=\"/answers/:id\" component={XxxAnswersPage} />\n              <Route path=\"/questions\" component={XxxQuestionsPage} />\n              <Route component={XxxPageNotFoundPage} />\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}